name: Release Obsidian plugin

on:
    push:
        tags:
            - "[0-9]+.[0-9]+.[0-9]+*" # ÂåπÈÖçÁ±ª‰ºº 1.0.0 Êàñ 1.0.0-beta.1 ÁöÑÊ†ºÂºè

permissions:
    contents: write

env:
    PLUGIN_NAME: yearly-glance

jobs:
    build:
        runs-on: ubuntu-22.04

        steps:
            - uses: actions/checkout@v4
              with:
                  fetch-depth: 0 # Ëé∑ÂèñÂÆåÊï¥ÁöÑgitÂéÜÂè≤

            - name: Use Node.js
              uses: actions/setup-node@v3
              with:
                  node-version: "18.x"

            - name: Prepare manifest
              id: prepare_manifest
              run: |
                  if [[ ${{ github.ref }} == *"beta"* ]]; then
                    cp manifest-beta.json manifest.json
                  fi

            - name: Build
              id: build
              run: |
                  npm install -g yarn
                  yarn
                  yarn run build --if-present
                  mkdir ${{ env.PLUGIN_NAME }}
                  cp main.js manifest.json styles.css ${{ env.PLUGIN_NAME }}
                  zip -r ${{ env.PLUGIN_NAME }}.zip ${{ env.PLUGIN_NAME }}
                  ls
                  echo "tag_name=$(git tag --sort version:refname | tail -n 1)" >> $GITHUB_OUTPUT

            - name: Generate Changelog
              id: changelog
              run: |
                  # Define section names (without emojis)
                  declare -A SECTION_MAP
                  SECTION_MAP["Bug Fixes"]="Bug Fixes"
                  SECTION_MAP["Features"]="Features"
                  SECTION_MAP["BREAKING CHANGES"]="BREAKING CHANGES"
                  SECTION_MAP["Styles"]="Styles"
                  SECTION_MAP["Chores"]="Chores"
                  SECTION_MAP["Documentation"]="Documentation"
                  SECTION_MAP["Refactors"]="Refactors"
                  SECTION_MAP["Performance"]="Performance"
                  SECTION_MAP["Tests"]="Tests"

                  # Define Chinese translations
                  declare -A ZH_SECTION_MAP
                  ZH_SECTION_MAP["Bug Fixes"]="‰øÆÂ§ç"
                  ZH_SECTION_MAP["Features"]="Êñ∞ÂäüËÉΩ"
                  ZH_SECTION_MAP["BREAKING CHANGES"]="Á†¥ÂùèÊÄßÂèòÊõ¥"
                  ZH_SECTION_MAP["Styles"]="Ê†∑Âºè"
                  ZH_SECTION_MAP["Chores"]="ÊùÇÈ°π"
                  ZH_SECTION_MAP["Documentation"]="ÊñáÊ°£"
                  ZH_SECTION_MAP["Refactors"]="ÈáçÊûÑ"
                  ZH_SECTION_MAP["Performance"]="ÊÄßËÉΩ‰ºòÂåñ"
                  ZH_SECTION_MAP["Tests"]="ÊµãËØï"

                  # Initialize changelog files
                  CHANGELOG_EN="CHANGELOG.md"
                  CHANGELOG_ZH="CHANGELOG-zh.md"
                  TEMP_CHANGELOG="temp_changelog.md"

                  # Function to extract and format changelog content
                  format_changelog() {
                    local changelog_file=$1
                    local output_file=$2
                    local is_chinese=$3
                    local in_first_version=false
                    local in_section=false
                    local current_section=""
                    local found_breaking_changes=""
                    
                    > "$output_file"  # Initialize empty file
                    
                    # First pass to extract BREAKING CHANGES
                    while IFS= read -r line; do
                      if [[ $line =~ ^#\ \[.*\].*$ ]] && ! $in_first_version; then
                        in_first_version=true
                        continue
                      fi
                      
                      if $in_first_version; then
                        if [[ $line =~ ^#\ \[.*\].*$ ]]; then
                          # We've reached the next version, stop processing
                          break
                        fi
                        
                        if [[ $line =~ ^###\ BREAKING\ CHANGES ]] || [[ $line =~ ^###\ Á†¥ÂùèÊÄßÂèòÊõ¥ ]]; then
                          in_section=true
                          current_section="BREAKING CHANGES"
                          continue
                        fi
                        
                        if [[ $line =~ ^###\  ]]; then
                          in_section=false
                          continue
                        fi
                        
                        if $in_section && [[ $current_section == "BREAKING CHANGES" ]]; then
                          # Collect breaking changes content
                          if [[ -n $line ]]; then
                            found_breaking_changes+="$line"$'\n'
                          fi
                        fi
                      fi
                    done < "$changelog_file"
                    
                    # Print breaking changes if found
                    if [[ -n $found_breaking_changes ]]; then
                      if [ "$is_chinese" = true ]; then
                        echo -e "### ${ZH_SECTION_MAP["BREAKING CHANGES"]}\n" >> "$output_file"
                      else
                        echo -e "### ${SECTION_MAP["BREAKING CHANGES"]}\n" >> "$output_file"
                      fi
                      echo -e "$found_breaking_changes" >> "$output_file"
                      echo -e "\n" >> "$output_file"
                    fi
                    
                    # Second pass for other sections
                    in_first_version=false
                    in_section=false
                    current_section=""
                    
                    while IFS= read -r line; do
                      if [[ $line =~ ^#\ \[.*\].*$ ]] && ! $in_first_version; then
                        # Extract and write the version title
                        echo -e "## Changes\n" >> "$output_file"
                        in_first_version=true
                        continue
                      fi
                      
                      if $in_first_version; then
                        if [[ $line =~ ^#\ \[.*\].*$ ]]; then
                          # We've reached the next version, stop processing
                          break
                        fi
                        
                        # Detect section headers
                        if [[ $line =~ ^###\ (.*)$ ]]; then
                          section="${BASH_REMATCH[1]}"
                          # Skip breaking changes as we've already processed them
                          if [[ $section == "BREAKING CHANGES" ]] || [[ $section == "Á†¥ÂùèÊÄßÂèòÊõ¥" ]]; then
                            in_section=false
                            continue
                          fi
                          
                          # Keep section header as is (without emoji mapping)
                          echo -e "### $section\n" >> "$output_file"
                          
                          in_section=true
                          current_section="$section"
                          continue
                        fi
                        
                        # Write content lines for current section
                        if $in_section && [[ $current_section != "BREAKING CHANGES" ]] && [[ $current_section != "Á†¥ÂùèÊÄßÂèòÊõ¥" ]]; then
                          if [[ -n $line ]]; then
                            echo "$line" >> "$output_file"
                          fi
                        fi
                      fi
                    done < "$changelog_file"
                  }

                  # Process English changelog
                  if [ -f "$CHANGELOG_EN" ]; then
                    format_changelog "$CHANGELOG_EN" "en_$TEMP_CHANGELOG" false
                  else
                    echo "English changelog file not found. Using fallback."
                    echo -e "## Changes\n\nNo changelog available." > "en_$TEMP_CHANGELOG"
                  fi

                  # Process Chinese changelog
                  if [ -f "$CHANGELOG_ZH" ]; then
                    format_changelog "$CHANGELOG_ZH" "zh_$TEMP_CHANGELOG" true
                    
                    # Combine both changelogs
                    echo -e "# English Changelog\n" > "$TEMP_CHANGELOG"
                    cat "en_$TEMP_CHANGELOG" >> "$TEMP_CHANGELOG"
                    echo -e "\n# ‰∏≠ÊñáÊõ¥Êñ∞Êó•Âøó\n" >> "$TEMP_CHANGELOG"
                    cat "zh_$TEMP_CHANGELOG" >> "$TEMP_CHANGELOG"
                  else
                    # If no Chinese changelog, just use the English one
                    cp "en_$TEMP_CHANGELOG" "$TEMP_CHANGELOG"
                  fi

                  # Output the changelog for GitHub Actions
                  echo "changelog<<EOF" >> $GITHUB_OUTPUT
                  cat "$TEMP_CHANGELOG" >> $GITHUB_OUTPUT
                  echo "EOF" >> $GITHUB_OUTPUT

            - name: Create Release
              id: create_release
              uses: actions/create-release@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  tag_name: ${{ github.ref }}
                  release_name: ${{ github.ref }}
                  draft: false
                  prerelease: ${{ contains(github.ref, 'beta') }}
                  body: |
                      ${{ contains(github.ref, 'beta') && 'üöß This is a beta release' || 'üéâ This is a stable release' }}

                      **Version:** ${{ github.ref_name }}

                      [English Changelog](https://github.com/Moyf/yearly-glance/blob/master/CHANGELOG.md) | [‰∏≠ÊñáÊõ¥Êñ∞Êó•Âøó](https://github.com/Moyf/yearly-glance/blob/master/CHANGELOG-zh.md)

                      ${{ steps.changelog.outputs.changelog }}

                      # Installation
                      1. Download the files from the Assets section below
                      2. Copy them to your vault's plugins folder: `<vault>/.obsidian/plugins/yearly-glance/`
                      3. Reload Obsidian
                      4. Enable plugin in settings

            - name: Upload zip file
              id: upload-zip
              uses: actions/upload-release-asset@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  upload_url: ${{ steps.create_release.outputs.upload_url }}
                  asset_path: ./${{ env.PLUGIN_NAME }}.zip
                  asset_name: ${{ env.PLUGIN_NAME }}.zip
                  asset_content_type: application/zip

            - name: Upload main.js
              id: upload-main
              uses: actions/upload-release-asset@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  upload_url: ${{ steps.create_release.outputs.upload_url }}
                  asset_path: ./main.js
                  asset_name: main.js
                  asset_content_type: text/javascript

            - name: Upload manifest.json
              id: upload-manifest
              uses: actions/upload-release-asset@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  upload_url: ${{ steps.create_release.outputs.upload_url }}
                  asset_path: ./manifest.json
                  asset_name: manifest.json
                  asset_content_type: application/json

            - name: Upload styles.css
              id: upload-styles
              uses: actions/upload-release-asset@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  upload_url: ${{ steps.create_release.outputs.upload_url }}
                  asset_path: ./styles.css
                  asset_name: styles.css
                  asset_content_type: text/css

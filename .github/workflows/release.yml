name: Release Obsidian plugin

on:
    push:
        tags:
            - "[0-9]+.[0-9]+.[0-9]+*" # 匹配类似 1.0.0 或 1.0.0-beta.1 的格式

permissions:
    contents: write

env:
    PLUGIN_NAME: yearly-glance

jobs:
    build:
        runs-on: ubuntu-22.04

        steps:
            - uses: actions/checkout@v4
              with:
                  fetch-depth: 0 # 获取完整的git历史

            - name: Use Node.js
              uses: actions/setup-node@v3
              with:
                  node-version: "18.x"

            - name: Prepare manifest
              id: prepare_manifest
              run: |
                  if [[ ${{ github.ref }} == *"beta"* ]]; then
                    cp manifest-beta.json manifest.json
                  fi

            - name: Build
              id: build
              run: |
                  npm install -g yarn
                  yarn
                  yarn run build --if-present
                  mkdir ${{ env.PLUGIN_NAME }}
                  cp main.js manifest.json styles.css ${{ env.PLUGIN_NAME }}
                  zip -r ${{ env.PLUGIN_NAME }}.zip ${{ env.PLUGIN_NAME }}
                  ls
                  echo "tag_name=$(git tag --sort version:refname | tail -n 1)" >> $GITHUB_OUTPUT

            - name: Generate Changelog
              id: changelog
              run: |
                  # 定义部分名称（不包含表情符号）
                  declare -A SECTION_MAP
                  SECTION_MAP["BREAKING CHANGES"]="BREAKING CHANGES"
                  SECTION_MAP["Features"]="Features"
                  SECTION_MAP["Bug Fixes"]="Bug Fixes"
                  SECTION_MAP["Documentation"]="Documentation"
                  SECTION_MAP["Styles"]="Styles"
                  SECTION_MAP["Refactors"]="Refactors"
                  SECTION_MAP["Performance"]="Performance"
                  SECTION_MAP["Tests"]="Tests"
                  SECTION_MAP["Build"]="Build"
                  SECTION_MAP["CI"]="CI"
                  SECTION_MAP["Chore"]="Chore"
                  SECTION_MAP["Reverts"]="Reverts"

                  # 定义中文翻译
                  declare -A ZH_SECTION_MAP
                  ZH_SECTION_MAP["BREAKING CHANGES"]="破坏性变更"
                  ZH_SECTION_MAP["Features"]="新功能"
                  ZH_SECTION_MAP["Bug Fixes"]="修复"
                  ZH_SECTION_MAP["Documentation"]="文档"
                  ZH_SECTION_MAP["Styles"]="样式"
                  ZH_SECTION_MAP["Refactors"]="重构"
                  ZH_SECTION_MAP["Performance"]="性能优化"
                  ZH_SECTION_MAP["Tests"]="测试"
                  ZH_SECTION_MAP["Build"]="构建"
                  ZH_SECTION_MAP["CI"]="持续集成"
                  ZH_SECTION_MAP["Chore"]="杂项"
                  ZH_SECTION_MAP["Reverts"]="回退"

                  # 初始化 changelog 文件
                  CHANGELOG_EN="CHANGELOG.md"
                  CHANGELOG_ZH="CHANGELOG-zh.md"
                  TEMP_CHANGELOG="temp_changelog.md"

                  # 提取并格式化 changelog 内容的函数
                  format_changelog() {
                    local changelog_file=$1
                    local output_file=$2
                    local is_chinese=$3
                    local in_first_version=false
                    local in_section=false
                    local current_section=""
                    local found_breaking_changes=""
                    
                    > "$output_file"  # 初始化空文件
                    
                    # 第一遍处理：提取破坏性变更
                    while IFS= read -r line; do
                      if [[ $line =~ ^#\ \[.*\].*$ ]] && ! $in_first_version; then
                        in_first_version=true
                        continue
                      fi
                      
                      if $in_first_version; then
                        if [[ $line =~ ^#\ \[.*\].*$ ]]; then
                          # 已到达下一个版本，停止处理
                          break
                        fi
                        
                        if [[ $line =~ ^###\ BREAKING\ CHANGES ]] || [[ $line =~ ^###\ 破坏性变更 ]]; then
                          in_section=true
                          current_section="BREAKING CHANGES"
                          continue
                        fi
                        
                        if [[ $line =~ ^###\  ]]; then
                          in_section=false
                          continue
                        fi
                        
                        if $in_section && [[ $current_section == "BREAKING CHANGES" ]]; then
                          # 收集破坏性变更内容
                          if [[ -n $line ]]; then
                            found_breaking_changes+="$line"$'\n'
                          fi
                        fi
                      fi
                    done < "$changelog_file"
                    
                    # 如果找到破坏性变更，则打印
                    if [[ -n $found_breaking_changes ]]; then
                      if [ "$is_chinese" = true ]; then
                        echo -e "### ${ZH_SECTION_MAP["BREAKING CHANGES"]}\n" >> "$output_file"
                      else
                        echo -e "### ${SECTION_MAP["BREAKING CHANGES"]}\n" >> "$output_file"
                      fi
                      echo -e "$found_breaking_changes" >> "$output_file"
                      echo -e "\n" >> "$output_file"
                    fi
                    
                    # 第二遍处理：处理其他部分
                    in_first_version=false
                    in_section=false
                    current_section=""
                    
                    while IFS= read -r line; do
                      if [[ $line =~ ^#\ \[.*\].*$ ]] && ! $in_first_version; then
                        # 提取并写入版本标题
                        echo -e "## Changes\n" >> "$output_file"
                        in_first_version=true
                        continue
                      fi
                      
                      if $in_first_version; then
                        if [[ $line =~ ^#\ \[.*\].*$ ]]; then
                          # 已到达下一个版本，停止处理
                          break
                        fi
                        
                        # 检测部分标题
                        if [[ $line =~ ^###\ (.*)$ ]]; then
                          section="${BASH_REMATCH[1]}"
                          # 跳过破坏性变更，因为我们已经处理过它们
                          if [[ $section == "BREAKING CHANGES" ]] || [[ $section == "破坏性变更" ]]; then
                            in_section=false
                            continue
                          fi
                          
                          # 保持部分标题原样（不使用表情符号映射）
                          echo -e "### $section\n" >> "$output_file"
                          
                          in_section=true
                          current_section="$section"
                          continue
                        fi
                        
                        # 为当前部分写入内容行
                        if $in_section && [[ $current_section != "BREAKING CHANGES" ]] && [[ $current_section != "破坏性变更" ]]; then
                          if [[ -n $line ]]; then
                            echo "$line" >> "$output_file"
                          fi
                        fi
                      fi
                    done < "$changelog_file"
                    
                    # 添加安装说明
                    if [ "$is_chinese" = true ]; then
                      echo -e "\n## 如何安装\n" >> "$output_file"
                      echo -e "1. 下载 \`yearly-glance.zip\` 压缩文件" >> "$output_file"
                      echo -e "2. 解压到你的 Obsidian 库的插件文件夹内: \`<vault>/.obsidian/plugins/yearly-glance/\`" >> "$output_file"
                      echo -e "3. 重启 Obsidian" >> "$output_file"
                      echo -e "4. 在设置中启用 Yearly Glance" >> "$output_file"
                    else
                      echo -e "\n## Installation\n" >> "$output_file"
                      echo -e "1. Download the files from the Assets section below" >> "$output_file"
                      echo -e "2. Copy them to your vault's plugins folder: \`<vault>/.obsidian/plugins/yearly-glance/\`" >> "$output_file"
                      echo -e "3. Reload Obsidian" >> "$output_file"
                      echo -e "4. Enable plugin in settings" >> "$output_file"
                    fi
                  }

                  # 处理英文 changelog
                  if [ -f "$CHANGELOG_EN" ]; then
                    format_changelog "$CHANGELOG_EN" "en_$TEMP_CHANGELOG" false
                  else
                    echo "英文 changelog 文件未找到。使用备用方案。"
                    echo -e "## Changes\n\nNo changelog available.\n\n## Installation\n\n1. Download the files from the Assets section below\n2. Copy them to your vault's plugins folder: \`<vault>/.obsidian/plugins/yearly-glance/\`\n3. Reload Obsidian\n4. Enable plugin in settings" > "en_$TEMP_CHANGELOG"
                  fi

                  # 处理中文 changelog
                  if [ -f "$CHANGELOG_ZH" ]; then
                    format_changelog "$CHANGELOG_ZH" "zh_$TEMP_CHANGELOG" true
                    
                    # 合并两个 changelogs
                    echo -e "# English Changelog\n" > "$TEMP_CHANGELOG"
                    cat "en_$TEMP_CHANGELOG" >> "$TEMP_CHANGELOG"
                    echo -e "\n# 中文更新日志\n" >> "$TEMP_CHANGELOG"
                    cat "zh_$TEMP_CHANGELOG" >> "$TEMP_CHANGELOG"
                  else
                    # 如果没有中文 changelog，只使用英文版本
                    cp "en_$TEMP_CHANGELOG" "$TEMP_CHANGELOG"
                  fi

                  # 输出 changelog 给 GitHub Actions
                  echo "changelog<<EOF" >> $GITHUB_OUTPUT
                  cat "$TEMP_CHANGELOG" >> $GITHUB_OUTPUT
                  echo "EOF" >> $GITHUB_OUTPUT

            - name: Create Release
              id: create_release
              uses: actions/create-release@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  tag_name: ${{ github.ref }}
                  release_name: ${{ github.ref }}
                  draft: false
                  prerelease: ${{ contains(github.ref, 'beta') }}
                  body: |
                      ${{ contains(github.ref, 'beta') && '🚧 This is a beta release' || '🎉 This is a stable release' }}

                      **Version:** ${{ github.ref_name }}

                      [English Changelog](https://github.com/Moyf/yearly-glance/blob/master/CHANGELOG.md) | [中文更新日志](https://github.com/Moyf/yearly-glance/blob/master/CHANGELOG-zh.md)

                      ${{ steps.changelog.outputs.changelog }}

            - name: Upload zip file
              id: upload-zip
              uses: actions/upload-release-asset@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  upload_url: ${{ steps.create_release.outputs.upload_url }}
                  asset_path: ./${{ env.PLUGIN_NAME }}.zip
                  asset_name: ${{ env.PLUGIN_NAME }}.zip
                  asset_content_type: application/zip

            - name: Upload main.js
              id: upload-main
              uses: actions/upload-release-asset@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  upload_url: ${{ steps.create_release.outputs.upload_url }}
                  asset_path: ./main.js
                  asset_name: main.js
                  asset_content_type: text/javascript

            - name: Upload manifest.json
              id: upload-manifest
              uses: actions/upload-release-asset@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  upload_url: ${{ steps.create_release.outputs.upload_url }}
                  asset_path: ./manifest.json
                  asset_name: manifest.json
                  asset_content_type: application/json

            - name: Upload styles.css
              id: upload-styles
              uses: actions/upload-release-asset@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  upload_url: ${{ steps.create_release.outputs.upload_url }}
                  asset_path: ./styles.css
                  asset_name: styles.css
                  asset_content_type: text/css

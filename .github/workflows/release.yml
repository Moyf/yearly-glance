name: Release Obsidian plugin

on:
    push:
        tags:
            - "[0-9]+.[0-9]+.[0-9]+*" # 匹配类似 1.0.0 或 1.0.0-beta.1 的格式

permissions:
    contents: write

env:
    PLUGIN_NAME: yearly-glance

jobs:
    build:
        runs-on: ubuntu-22.04

        steps:
            - uses: actions/checkout@v4
              with:
                  fetch-depth: 0 # 获取完整的git历史

            - name: Use Node.js
              uses: actions/setup-node@v3
              with:
                  node-version: "18.x"

            - name: Prepare manifest
              id: prepare_manifest
              run: |
                  if [[ ${{ github.ref }} == *"beta"* ]]; then
                    cp manifest-beta.json manifest.json
                  fi

            - name: Build
              id: build
              run: |
                  npm install -g yarn
                  yarn
                  yarn run build --if-present
                  mkdir ${{ env.PLUGIN_NAME }}
                  cp main.js manifest.json styles.css ${{ env.PLUGIN_NAME }}
                  zip -r ${{ env.PLUGIN_NAME }}.zip ${{ env.PLUGIN_NAME }}
                  ls
                  echo "tag_name=$(git tag --sort version:refname | tail -n 1)" >> $GITHUB_OUTPUT

            - name: Generate Changelog
              id: changelog
              run: |
                # 检查是否存在任何tag
                if ! git describe --tags > /dev/null 2>&1; then
                  # 如果没有任何tag，使用初始commit作为起点
                  echo "## 🎉 First Release" > temp_changelog.md
                  COMMITS=$(git log --pretty=format:"- %s" --reverse)
                else
                  # 获取最新tag
                  LATEST_TAG=$(git describe --tags --abbrev=0)
                  
                  # 判断当前是否为beta版本
                  if [[ $LATEST_TAG == *"-beta"* ]]; then
                    # Beta版本：查找上一个beta版本tag
                    PREVIOUS_TAG=$(git tag --sort=-version:refname | grep -E ".*-beta.*" | sed -n '2p')
                  else
                    # 正式版本：查找上一个正式版本tag（不包含beta）
                    PREVIOUS_TAG=$(git tag --sort=-version:refname | grep -vE ".*-beta.*" | sed -n '2p')
                  fi
                  
                  if [ ! -z "$PREVIOUS_TAG" ]; then
                    COMMITS=$(git log ${PREVIOUS_TAG}..${LATEST_TAG} --no-merges --pretty=format:"- %s" --reverse)
                  else
                    # 如果找不到上一个对应类型的tag，则使用第一个commit
                    FIRST_COMMIT=$(git rev-list --max-parents=0 HEAD)
                    COMMITS=$(git log ${FIRST_COMMIT}..${LATEST_TAG} --no-merges --pretty=format:"- %s" --reverse)
                  fi
                  
                  echo -e "## Changes\n" > temp_changelog.md
                fi

                # 定义要处理的commit类型（按照Conventional Commits规范）
                declare -A TYPE_TITLES=(
                  ["feat"]="✨ Features"
                  ["fix"]="🐛 Bug Fixes"
                  ["perf"]="⚡ Performance Improvements"
                  ["refactor"]="♻️ Code Refactoring"
                  ["style"]="💄 Styles"
                  ["docs"]="📝 Documentation"
                  ["test"]="✅ Tests"
                  ["build"]="👷 Build System"
                  ["ci"]="🔧 Continuous Integration"
                  ["chore"]="🔨 Chores"
                  ["revert"]="⏪ Reverts"
                )

                # 首先检查是否有破坏性变更
                BREAKING_CHANGES=$(echo "$COMMITS" | grep -E "^- (feat|fix|refactor|perf|style|test|build|ci|chore|revert)(\([^)]*\))?!:" || true)
                if [ ! -z "$BREAKING_CHANGES" ]; then
                  echo -e "\n### ⚠️ BREAKING CHANGES\n" >> temp_changelog.md
                  while IFS= read -r COMMIT; do
                    if [[ $COMMIT =~ ^-\ ([a-zA-Z]+)(\([^)]*\))?!:\ (.*)$ ]]; then
                      TYPE="${BASH_REMATCH[1]}"
                      SCOPE="${BASH_REMATCH[2]}"
                      SCOPE="${SCOPE//[()]/}"  # 移除括号
                      DESC="${BASH_REMATCH[3]}"
                      if [ ! -z "$SCOPE" ]; then
                        echo "- **${SCOPE}**: ${DESC}" >> temp_changelog.md
                      else
                        echo "- ${DESC}" >> temp_changelog.md
                      fi
                    fi
                  done <<< "$BREAKING_CHANGES"
                fi

                # 处理常规commit类型
                for TYPE in "${!TYPE_TITLES[@]}"; do
                  # 从所有commits中过滤出特定类型的commits（排除已处理的breaking changes）
                  TYPE_COMMITS=$(echo "$COMMITS" | grep -E "^- ${TYPE}(\([^)]*\))?:" | grep -v "!" || true)
                  
                  if [ ! -z "$TYPE_COMMITS" ]; then
                    # 添加分类标题
                    echo -e "\n### ${TYPE_TITLES[$TYPE]}\n" >> temp_changelog.md
                    
                    # 处理每个commit消息，提取scope和描述
                    while IFS= read -r COMMIT; do
                      if [[ $COMMIT =~ ^-\ ${TYPE}(\(([^)]*)\))?:\ (.*)$ ]]; then
                        SCOPE="${BASH_REMATCH[2]}"
                        DESC="${BASH_REMATCH[3]}"
                        if [ ! -z "$SCOPE" ]; then
                          echo "- **${SCOPE}**: ${DESC}" >> temp_changelog.md
                        else
                          echo "- ${DESC}" >> temp_changelog.md
                        fi
                      fi
                    done <<< "$TYPE_COMMITS"
                  fi
                done

                # 检查是否有不符合规范的提交
                OTHER_COMMITS=$(echo "$COMMITS" | grep -v -E "^- (feat|fix|perf|refactor|style|docs|test|build|ci|chore|revert)(\([^)]*\))?!?:" || true)
                if [ ! -z "$OTHER_COMMITS" ]; then
                  echo -e "\n### 🔄 Other Changes\n" >> temp_changelog.md
                  echo "$OTHER_COMMITS" >> temp_changelog.md
                fi

                # 将处理后的changelog保存到GITHUB_OUTPUT
                echo "changelog<<EOF" >> $GITHUB_OUTPUT
                cat temp_changelog.md >> $GITHUB_OUTPUT
                echo "EOF" >> $GITHUB_OUTPUT

            - name: Create Release
              id: create_release
              uses: actions/create-release@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  tag_name: ${{ github.ref }}
                  release_name: ${{ github.ref }}
                  draft: false
                  prerelease: ${{ contains(github.ref, 'beta') }}
                  body: |
                      ${{ contains(github.ref, 'beta') && '🚧 This is a beta release' || '🎉 This is a stable release' }}

                      **Version:** ${{ github.ref_name }}

                      ${{ steps.changelog.outputs.changelog }}

                      ## Installation
                      1. Download the files from the Assets section below
                      2. Copy them to your vault's plugins folder: `<vault>/.obsidian/plugins/yearly-glance/`
                      3. Reload Obsidian
                      4. Enable plugin in settings

            - name: Upload zip file
              id: upload-zip
              uses: actions/upload-release-asset@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  upload_url: ${{ steps.create_release.outputs.upload_url }}
                  asset_path: ./${{ env.PLUGIN_NAME }}.zip
                  asset_name: ${{ env.PLUGIN_NAME }}.zip
                  asset_content_type: application/zip

            - name: Upload main.js
              id: upload-main
              uses: actions/upload-release-asset@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  upload_url: ${{ steps.create_release.outputs.upload_url }}
                  asset_path: ./main.js
                  asset_name: main.js
                  asset_content_type: text/javascript

            - name: Upload manifest.json
              id: upload-manifest
              uses: actions/upload-release-asset@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  upload_url: ${{ steps.create_release.outputs.upload_url }}
                  asset_path: ./manifest.json
                  asset_name: manifest.json
                  asset_content_type: application/json

            - name: Upload styles.css
              id: upload-styles
              uses: actions/upload-release-asset@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  upload_url: ${{ steps.create_release.outputs.upload_url }}
                  asset_path: ./styles.css
                  asset_name: styles.css
                  asset_content_type: text/css
